version: 2

default_config: &default_config
  working_directory: ~/circleci/tns-circleci-example
  macos:
    xcode: "9.3.0"
  environment:
    ANDROID_HOME: "/usr/local/share/android-sdk"

jobs:
  build_test_deploy:
    <<: *default_config
    steps:
      - checkout
      - add_ssh_keys
      - run:
          name: Fetch CocoaPods repository
          command: |
            curl https://cocoapods-specs.circleci.com/fetch-cocoapods-repo-from-s3.sh | bash -s cf
            # Fetch cocoapods specs from S3 instead of github
      - run:
          name: Setup system dependencies
          command: |
            brew update
            brew cask install android-sdk
            echo y | $ANDROID_HOME/tools/bin/sdkmanager "platform-tools" "platforms;android-25" "build-tools;25.0.2" "extras;android;m2repository" "extras;google;m2repository"
            npm i -g nativescript --ignore-scripts
            tns usage-reporting disable
            tns error-reporting disable
      - restore_cache:
          key: npm-cache-{{ checksum "./package-lock.json" }}
      - run:
          name: "Install node dependencies"
          command: npm install
      - save_cache:
          key: npm-cache-{{ checksum "./package-lock.json" }}
          paths:
            - ~/.npm
      - run:
          name: "Rebuild Node SASS bindings"
          command: npm rebuild node-sass --force
      - run:
          name: "Pre-launch iOS Simulator"
          command: xcrun instruments -w "iPhone 8 (11.2) [" || true
      - run:
          name: "Prepare ios"
          # Hack -> git log outputed as error
          command: tns prepare ios || echo "ios build done"
      - run:
          name: "Prepare Android"
          command: tns prepare android
      - run:
          name: "Run unit tests"
          # --justlaunch ensure the unit test suite give the hand back to the CLI in the end
          command: tns test ios --justlaunch
      - run:
          name: "Run E2E tests"
          command: echo "TODO"
      - run:
          name: "Build iOS"
          command: |
            ./scripts/build_ios.sh
      - run:
          name: "Build Android"
          command: |
            ./scripts/build_android.sh
      - run:
          name: "Deploy"
          command: |
            ./scripts/deploy.sh

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - build_test_deploy
      #  Idealy we want jobs so be setted like this, but need
      #  ability to keep builds and env global clis between jobs
      # - test-unit:
      #     requires:
      #       - build
      # - test-e2e:
      #     requires:
      #       - build
      # - deploy-qa:
      #     requires:
      #       - build
      #       - test-unit
      #       - test-e2e
      #     filters:
      #       branches:
      #         only:
      #           - develop
      # - deploy-prod:
      #     requires:
      #       - build
      #       - test-unit
      #       - test-e2e
      #     filters:
      #       branches:
      #         only: master
